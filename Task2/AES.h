#include <bits/stdc++.h>
#include <io.h>
#include <fcntl.h>
#include <codecvt>
#include <math.h>
#ifdef _WIN32
#include <windows.h>
#endif

const unsigned char S_BOX[256]={
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

const unsigned char INV_S_BOX[256]={
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

const unsigned char RCON[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};

// Mảng lưu tối đa 240 bytes (60 words) cho key 
unsigned char round_key[240];

// Mảng lưu 32 byte của key nhập từ bàn phím
unsigned char key[32];

// Mảng lưu 16 byte của IV nhập từ bàn phím
unsigned char iv[16];

// Mảng lưu dữ liệu đầu vào
unsigned char in[1024];

// Mảng lưu dữ liệu đầu ra
unsigned char out[1024];

// Ma trận trạng thái
unsigned char state_matrix[4][4];

// Mảng lưu các phần tử kiểu byte
unsigned char byteArr[1024];

// Định nghĩa các hàm
void supportVietnamese();



// Hàm padding khi mã hóa
int encrypt_fill_block(int, char*, unsigned char*);

// Hàm padding khi giải mã
int decrypt_fill_block(int, unsigned char*, int);

// Hàm sinh khóa (khóa 32 byte)
void key_expansion_256();

// Hàm SubBytes()
void sub_bytes();
void inv_sub_bytes(); // dùng trong giải mã

// Hàm ShiftRows()
void shift_rows(); // dịch trái vòng trong mã hóa
void inv_shift_rows(); // dịch phải vòng tron giải mã

// Hàm MixColumns()
void mix_columns();
void inv_mix_columns(); // dùng trong giải mã

// Hàm AddRoundKey()
void add_round_key(int);

// Hàm mã hóa AES_256
void encrypt();

// Hàm giải mã AES_256
void decrypt();

void supportVietnamese()
{
    #ifdef _WIN32
    _setmode(_fileno(stdin), _O_U16TEXT);
    _setmode(_fileno(stdout), _O_U16TEXT);
    #endif
}


int encrypt_fill_block(int size, char* c_input, unsigned char* in)
{
    int i = 0;
    while (size < strlen(c_input)) 
    {
        if (i >= 16) break;
        in[i++] = (unsigned char)c_input[size];
        size++;
    }

    // Thêm (padding) bit 0 vào block
    if (size >= strlen(c_input))
    {
        for ( ; i < 16 ; i++)
        {
            in[i] = 0;
        }
    }

    return size;
}

int decrypt_fill_block(int size, unsigned char* in, int len)
{
    int i = 0;
    while (size < len) 
    {
        if (i >= 16) break;
        in[i++] = byteArr[size];
        size++;
    }
   return size;
}

void key_expansion_256()
{
    int i, j;
    unsigned char str[4], k;

    // 8 word đầu tiên lấy trực tiếp từ 32 byte key
    for (i = 0; i < 8; i++)
    {
        round_key[i * 4] = key[i * 4];
        round_key[i * 4 + 1] = key[i * 4 + 1];
        round_key[i * 4 + 2] = key[i * 4 + 2];
        round_key[i * 4 + 3] = key[i * 4 + 3];
    }

    // Tạo word từ 8 đến 59
    while (i < 60)
    {
        for (j = 0; j < 4; j++)
        {
            str[j] = round_key[(i - 1) * 4 + j];
        }

        if (i % 8 == 0)
        {
            // Dịch 4 byte của word sang trái 1 đơn vị
	        // Hàm RotWord()
            k = str[0];
            str[0] = str[1];
            str[1] = str[2];
            str[2] = str[3];
            str[3] = k;

            // Hàm SubWord()
            str[0] = S_BOX[str[0]];
            str[1] = S_BOX[str[1]];
            str[2] = S_BOX[str[2]];
            str[3] = S_BOX[str[3]];
            str[0] =  str[0] ^ RCON[i/8];
        }
        else if (i % 8 == 4) 
        {
            // Hàm Subword()
            str[0] = S_BOX[str[0]];
            str[1] = S_BOX[str[1]];
            str[2] = S_BOX[str[2]];
            str[3] = S_BOX[str[3]];
        }
        round_key[i * 4] = round_key[(i - 8) * 4] ^ str[0];
        round_key[i * 4 + 1] = round_key[(i - 8) * 4 + 1] ^ str[1];
        round_key[i * 4 + 2] = round_key[(i - 8) * 4 + 2] ^ str[2];
        round_key[i * 4 + 3] = round_key[(i - 8) * 4 + 3] ^ str[3];
        i++;
    }
}

void sub_bytes()
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            int row = (int)state_matrix[i][j] / 16;
            int col = (int)state_matrix[i][j] % 16;
            state_matrix[i][j] = S_BOX[16 * row + col];
            
        }
    }
}

void inv_sub_bytes()
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            int row = (int)state_matrix[i][j] / 16;
            int col = (int)state_matrix[i][j] % 16;
            state_matrix[i][j] = INV_S_BOX[16 * row + col];
        }
    }
}

void shift_rows()
{
    // Hàng 2 dịch trái 1 byte
    unsigned char tmp_row2 = state_matrix[1][0];
    state_matrix[1][0] = state_matrix[1][1];
    state_matrix[1][1] = state_matrix[1][2];
    state_matrix[1][2] = state_matrix[1][3];
    state_matrix[1][3] = tmp_row2;

    // Hàng 3 dịch trái 2 byte
    unsigned char tmp_row3_1 = state_matrix[2][0];
    unsigned char tmp_row3_2 = state_matrix[2][1];
    state_matrix[2][0] = state_matrix[2][2];
    state_matrix[2][1] = state_matrix[2][3];
    state_matrix[2][2] = tmp_row3_1;
    state_matrix[2][3] = tmp_row3_2;

    // Hàng 4 dịch trái 3 byte
    unsigned char tmp_row4_1 = state_matrix[3][0];
    unsigned char tmp_row4_2 = state_matrix[3][1];
    unsigned char tmp_row4_3 = state_matrix[3][2];
    state_matrix[3][0] = state_matrix[3][3];
    state_matrix[3][1] = tmp_row4_1;
    state_matrix[3][2] = tmp_row4_2;
    state_matrix[3][3] = tmp_row4_3;
}

void inv_shift_rows()
{
    // Hàng 2 dịch phải 1 byte
    unsigned char tmp_row2 = state_matrix[1][3];
    state_matrix[1][3] = state_matrix[1][2];
    state_matrix[1][2] = state_matrix[1][1];
    state_matrix[1][1] = state_matrix[1][0];
    state_matrix[1][0] = tmp_row2;

    // Hàng 3 dịch phải 2 byte
    unsigned char tmp_row3_1 = state_matrix[2][3];
    unsigned char tmp_row3_2 = state_matrix[2][2];
    state_matrix[2][3] = state_matrix[2][1];
    state_matrix[2][2] = state_matrix[2][0];
    state_matrix[2][1] = tmp_row3_1;
    state_matrix[2][0] = tmp_row3_2;

    // Hàng 4 dịch phải 3 byte
    unsigned char tmp_row4_1 = state_matrix[3][3];
    unsigned char tmp_row4_2 = state_matrix[3][2];
    unsigned char tmp_row4_3 = state_matrix[3][1];
    state_matrix[3][3] = state_matrix[3][0];
    state_matrix[3][2] = tmp_row4_1;
    state_matrix[3][1] = tmp_row4_2;
    state_matrix[3][0] = tmp_row4_3;
}

// Phép nhân trong trường GF(2^8)
int gmul(unsigned char a, unsigned char b)
{
    int p = 0;

    for (int i = 0; i < 8; i++)
    {
        if (b & 1)
        {
            p ^= a;
        }

        int hi_bit_set = a & 0x80;
        a <<= 1;

        if (hi_bit_set)
        {
            a ^= 0x1b;
        }

        b >>= 1;
    }
    
    return p % 256;
}

void mix_columns()
{
    for (int i = 0; i < 4; i++)
    {
        unsigned char col[4];

        for (int j = 0; j < 4; j++)
        {
            col[j] = state_matrix[j][i];
        }

        state_matrix[0][i] = gmul(0x02, col[0]) ^ gmul(0x03, col[1]) ^ col[2] ^ col[3];
        state_matrix[1][i] = col[0] ^ gmul(0x02, col[1]) ^ gmul(0x03, col[2]) ^ col[3];
        state_matrix[2][i] = col[0] ^ col[1] ^ gmul(0x02, col[2]) ^ gmul(0x03, col[3]);
        state_matrix[3][i] = gmul(0x03, col[0]) ^ col[1] ^ col[2] ^ gmul(0x02, col[3]);
    }
}

void inv_mix_columns()
{
    for (int i = 0; i < 4; i++)
    {
        unsigned char col[4];

        for (int j = 0; j < 4; j++)
        {
            col[j] = state_matrix[j][i];
        }

        state_matrix[0][i] = gmul(0x0e, col[0]) ^ gmul(0x0b, col[1]) ^ gmul(0x0d, col[2]) ^ gmul(0x09, col[3]);
        state_matrix[1][i] = gmul(0x09, col[0]) ^ gmul(0x0e, col[1]) ^ gmul(0x0b, col[2]) ^ gmul(0x0d, col[3]);
        state_matrix[2][i] = gmul(0x0d, col[0]) ^ gmul(0x09, col[1]) ^ gmul(0x0e, col[2]) ^ gmul(0x0b, col[3]);
        state_matrix[3][i] = gmul(0x0b, col[0]) ^ gmul(0x0d, col[1]) ^ gmul(0x09, col[2]) ^ gmul(0x0e, col[3]);
    }
}

void add_round_key(int round)
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            state_matrix[j][i] ^= round_key[round * 16 + i * 4 + j];
        }
    }
}

void encrypt()
{
    // Gán phần tử trong mảng in vào ma trận state_matrix
    for (int i = 0 ; i < 4 ; i++) 
    {
        for (int j = 0 ; j < 4 ; j++)     
        {
	        state_matrix[j][i] = in[i * 4 + j];
        }
   }

   // Thực hiện add_round_key trước khi vào round 1
   add_round_key(0);

    // Bắt đầu thuật toán từ round 1 tới round 13
    for (int round = 1; round < 14; round++)
    {
        sub_bytes();
        shift_rows();
        mix_columns();
        add_round_key(round);
    }

    // Vòng cuối
    sub_bytes();
    shift_rows();
    add_round_key(14);

    // Gán các phần tử trong state_matrix vào mảng out
    for (int i = 0 ; i < 4 ; i++) 
    {
        for (int j = 0 ; j < 4 ; j++) 
        {
	        out[i * 4 + j] = state_matrix[j][i];
        }
    }
}

void decrypt()
{
    // Gán phần tử trong mảng in vào ma trận state_matrix
    for (int i = 0 ; i < 4 ; i++) 
    {
        for (int j = 0 ; j < 4 ; j++)     
        {
	        state_matrix[j][i] = in[i * 4 + j];
        }
    }

    // Thực hiện add_round_key trước khi vào round 1
    add_round_key(14);

    // Đi ngược từ round 13 tới round 1
    for (int round = 13; round > 0; round--)
    {
        inv_shift_rows();
        inv_sub_bytes();
        add_round_key(round);
        inv_mix_columns();
    }

    // Vòng cuối
    inv_shift_rows();
    inv_sub_bytes();
    add_round_key(0);

    // Gán các phần tử trong state_matrix vào mảng out
    for (int i = 0 ; i < 4 ; i++) 
    {
        for (int j = 0 ; j < 4 ; j++) 
        {
	        out[i * 4 + j] = state_matrix[j][i];
        }
    }
}

